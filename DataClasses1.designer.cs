#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LAB_5_ASOIU
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ASOUI2_lab4SQL")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAgeGroup(AgeGroup instance);
    partial void UpdateAgeGroup(AgeGroup instance);
    partial void DeleteAgeGroup(AgeGroup instance);
    partial void InsertApplications(Applications instance);
    partial void UpdateApplications(Applications instance);
    partial void DeleteApplications(Applications instance);
    partial void InsertChildren(Children instance);
    partial void UpdateChildren(Children instance);
    partial void DeleteChildren(Children instance);
    partial void InsertEmployees(Employees instance);
    partial void UpdateEmployees(Employees instance);
    partial void DeleteEmployees(Employees instance);
    partial void InsertGroups(Groups instance);
    partial void UpdateGroups(Groups instance);
    partial void DeleteGroups(Groups instance);
    partial void InsertLesson(Lesson instance);
    partial void UpdateLesson(Lesson instance);
    partial void DeleteLesson(Lesson instance);
    partial void InsertLessonType(LessonType instance);
    partial void UpdateLessonType(LessonType instance);
    partial void DeleteLessonType(LessonType instance);
    partial void InsertNews(News instance);
    partial void UpdateNews(News instance);
    partial void DeleteNews(News instance);
    partial void InsertParents(Parents instance);
    partial void UpdateParents(Parents instance);
    partial void DeleteParents(Parents instance);
    partial void InsertParentType(ParentType instance);
    partial void UpdateParentType(ParentType instance);
    partial void DeleteParentType(ParentType instance);
    partial void InsertProgress(Progress instance);
    partial void UpdateProgress(Progress instance);
    partial void DeleteProgress(Progress instance);
    partial void InsertReviews(Reviews instance);
    partial void UpdateReviews(Reviews instance);
    partial void DeleteReviews(Reviews instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ASOUI2_lab4SQLConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AgeGroup> AgeGroup
		{
			get
			{
				return this.GetTable<AgeGroup>();
			}
		}
		
		public System.Data.Linq.Table<Applications> Applications
		{
			get
			{
				return this.GetTable<Applications>();
			}
		}
		
		public System.Data.Linq.Table<Children> Children
		{
			get
			{
				return this.GetTable<Children>();
			}
		}
		
		public System.Data.Linq.Table<Employees> Employees
		{
			get
			{
				return this.GetTable<Employees>();
			}
		}
		
		public System.Data.Linq.Table<Groups> Groups
		{
			get
			{
				return this.GetTable<Groups>();
			}
		}
		
		public System.Data.Linq.Table<Lesson> Lesson
		{
			get
			{
				return this.GetTable<Lesson>();
			}
		}
		
		public System.Data.Linq.Table<LessonType> LessonType
		{
			get
			{
				return this.GetTable<LessonType>();
			}
		}
		
		public System.Data.Linq.Table<News> News
		{
			get
			{
				return this.GetTable<News>();
			}
		}
		
		public System.Data.Linq.Table<Parents> Parents
		{
			get
			{
				return this.GetTable<Parents>();
			}
		}
		
		public System.Data.Linq.Table<ParentType> ParentType
		{
			get
			{
				return this.GetTable<ParentType>();
			}
		}
		
		public System.Data.Linq.Table<Progress> Progress
		{
			get
			{
				return this.GetTable<Progress>();
			}
		}
		
		public System.Data.Linq.Table<Reviews> Reviews
		{
			get
			{
				return this.GetTable<Reviews>();
			}
		}
		
		public System.Data.Linq.Table<Room> Room
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AgeGroup")]
	public partial class AgeGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_AgeGroup;
		
		private string _Name;
		
		private string _AgeInterval;
		
		private EntitySet<Groups> _Groups;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_AgeGroupChanging(int value);
    partial void OnID_AgeGroupChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAgeIntervalChanging(string value);
    partial void OnAgeIntervalChanged();
    #endregion
		
		public AgeGroup()
		{
			this._Groups = new EntitySet<Groups>(new Action<Groups>(this.attach_Groups), new Action<Groups>(this.detach_Groups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_AgeGroup", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_AgeGroup
		{
			get
			{
				return this._ID_AgeGroup;
			}
			set
			{
				if ((this._ID_AgeGroup != value))
				{
					this.OnID_AgeGroupChanging(value);
					this.SendPropertyChanging();
					this._ID_AgeGroup = value;
					this.SendPropertyChanged("ID_AgeGroup");
					this.OnID_AgeGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeInterval", DbType="NVarChar(40)")]
		public string AgeInterval
		{
			get
			{
				return this._AgeInterval;
			}
			set
			{
				if ((this._AgeInterval != value))
				{
					this.OnAgeIntervalChanging(value);
					this.SendPropertyChanging();
					this._AgeInterval = value;
					this.SendPropertyChanged("AgeInterval");
					this.OnAgeIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AgeGroup_Groups", Storage="_Groups", ThisKey="ID_AgeGroup", OtherKey="ID_AgeGroup")]
		public EntitySet<Groups> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Groups(Groups entity)
		{
			this.SendPropertyChanging();
			entity.AgeGroup = this;
		}
		
		private void detach_Groups(Groups entity)
		{
			this.SendPropertyChanging();
			entity.AgeGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Applications")]
	public partial class Applications : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_app;
		
		private string _Surname_ch;
		
		private string _Name_ch;
		
		private string _Patronymic_ch;
		
		private string _Achievements;
		
		private string _Privileges;
		
		private System.Nullable<short> _Age_ch;
		
		private System.Nullable<int> _ID_parent;
		
		private EntityRef<Parents> _Parents;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_appChanging(int value);
    partial void OnID_appChanged();
    partial void OnSurname_chChanging(string value);
    partial void OnSurname_chChanged();
    partial void OnName_chChanging(string value);
    partial void OnName_chChanged();
    partial void OnPatronymic_chChanging(string value);
    partial void OnPatronymic_chChanged();
    partial void OnAchievementsChanging(string value);
    partial void OnAchievementsChanged();
    partial void OnPrivilegesChanging(string value);
    partial void OnPrivilegesChanged();
    partial void OnAge_chChanging(System.Nullable<short> value);
    partial void OnAge_chChanged();
    partial void OnID_parentChanging(System.Nullable<int> value);
    partial void OnID_parentChanged();
    #endregion
		
		public Applications()
		{
			this._Parents = default(EntityRef<Parents>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_app", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_app
		{
			get
			{
				return this._ID_app;
			}
			set
			{
				if ((this._ID_app != value))
				{
					this.OnID_appChanging(value);
					this.SendPropertyChanging();
					this._ID_app = value;
					this.SendPropertyChanged("ID_app");
					this.OnID_appChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname_ch", DbType="NVarChar(20)")]
		public string Surname_ch
		{
			get
			{
				return this._Surname_ch;
			}
			set
			{
				if ((this._Surname_ch != value))
				{
					this.OnSurname_chChanging(value);
					this.SendPropertyChanging();
					this._Surname_ch = value;
					this.SendPropertyChanged("Surname_ch");
					this.OnSurname_chChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_ch", DbType="NVarChar(20)")]
		public string Name_ch
		{
			get
			{
				return this._Name_ch;
			}
			set
			{
				if ((this._Name_ch != value))
				{
					this.OnName_chChanging(value);
					this.SendPropertyChanging();
					this._Name_ch = value;
					this.SendPropertyChanged("Name_ch");
					this.OnName_chChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic_ch", DbType="NVarChar(20)")]
		public string Patronymic_ch
		{
			get
			{
				return this._Patronymic_ch;
			}
			set
			{
				if ((this._Patronymic_ch != value))
				{
					this.OnPatronymic_chChanging(value);
					this.SendPropertyChanging();
					this._Patronymic_ch = value;
					this.SendPropertyChanged("Patronymic_ch");
					this.OnPatronymic_chChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Achievements", DbType="NVarChar(200)")]
		public string Achievements
		{
			get
			{
				return this._Achievements;
			}
			set
			{
				if ((this._Achievements != value))
				{
					this.OnAchievementsChanging(value);
					this.SendPropertyChanging();
					this._Achievements = value;
					this.SendPropertyChanged("Achievements");
					this.OnAchievementsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Privileges]", Storage="_Privileges", DbType="NVarChar(200)")]
		public string Privileges
		{
			get
			{
				return this._Privileges;
			}
			set
			{
				if ((this._Privileges != value))
				{
					this.OnPrivilegesChanging(value);
					this.SendPropertyChanging();
					this._Privileges = value;
					this.SendPropertyChanged("Privileges");
					this.OnPrivilegesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age_ch", DbType="SmallInt")]
		public System.Nullable<short> Age_ch
		{
			get
			{
				return this._Age_ch;
			}
			set
			{
				if ((this._Age_ch != value))
				{
					this.OnAge_chChanging(value);
					this.SendPropertyChanging();
					this._Age_ch = value;
					this.SendPropertyChanged("Age_ch");
					this.OnAge_chChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_parent", DbType="Int")]
		public System.Nullable<int> ID_parent
		{
			get
			{
				return this._ID_parent;
			}
			set
			{
				if ((this._ID_parent != value))
				{
					if (this._Parents.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_parentChanging(value);
					this.SendPropertyChanging();
					this._ID_parent = value;
					this.SendPropertyChanged("ID_parent");
					this.OnID_parentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parents_Applications", Storage="_Parents", ThisKey="ID_parent", OtherKey="ID_parent", IsForeignKey=true, DeleteRule="CASCADE")]
		public Parents Parents
		{
			get
			{
				return this._Parents.Entity;
			}
			set
			{
				Parents previousValue = this._Parents.Entity;
				if (((previousValue != value) 
							|| (this._Parents.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parents.Entity = null;
						previousValue.Applications.Remove(this);
					}
					this._Parents.Entity = value;
					if ((value != null))
					{
						value.Applications.Add(this);
						this._ID_parent = value.ID_parent;
					}
					else
					{
						this._ID_parent = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parents");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Children")]
	public partial class Children : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_child;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronymic;
		
		private int _ID_group;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private string _Gender;
		
		private EntitySet<ParentType> _ParentType;
		
		private EntitySet<Progress> _Progress;
		
		private EntityRef<Groups> _Groups;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_childChanging(int value);
    partial void OnID_childChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnID_groupChanging(int value);
    partial void OnID_groupChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    #endregion
		
		public Children()
		{
			this._ParentType = new EntitySet<ParentType>(new Action<ParentType>(this.attach_ParentType), new Action<ParentType>(this.detach_ParentType));
			this._Progress = new EntitySet<Progress>(new Action<Progress>(this.attach_Progress), new Action<Progress>(this.detach_Progress));
			this._Groups = default(EntityRef<Groups>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_child", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_child
		{
			get
			{
				return this._ID_child;
			}
			set
			{
				if ((this._ID_child != value))
				{
					this.OnID_childChanging(value);
					this.SendPropertyChanging();
					this._ID_child = value;
					this.SendPropertyChanged("ID_child");
					this.OnID_childChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(20)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(20)")]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_group", DbType="Int NOT NULL")]
		public int ID_group
		{
			get
			{
				return this._ID_group;
			}
			set
			{
				if ((this._ID_group != value))
				{
					if (this._Groups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_groupChanging(value);
					this.SendPropertyChanging();
					this._ID_group = value;
					this.SendPropertyChanged("ID_group");
					this.OnID_groupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(20)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Children_ParentType", Storage="_ParentType", ThisKey="ID_child", OtherKey="ID_child")]
		public EntitySet<ParentType> ParentType
		{
			get
			{
				return this._ParentType;
			}
			set
			{
				this._ParentType.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Children_Progress", Storage="_Progress", ThisKey="ID_child", OtherKey="ID_child")]
		public EntitySet<Progress> Progress
		{
			get
			{
				return this._Progress;
			}
			set
			{
				this._Progress.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_Children", Storage="_Groups", ThisKey="ID_group", OtherKey="ID_group", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Groups Groups
		{
			get
			{
				return this._Groups.Entity;
			}
			set
			{
				Groups previousValue = this._Groups.Entity;
				if (((previousValue != value) 
							|| (this._Groups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Groups.Entity = null;
						previousValue.Children.Remove(this);
					}
					this._Groups.Entity = value;
					if ((value != null))
					{
						value.Children.Add(this);
						this._ID_group = value.ID_group;
					}
					else
					{
						this._ID_group = default(int);
					}
					this.SendPropertyChanged("Groups");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ParentType(ParentType entity)
		{
			this.SendPropertyChanging();
			entity.Children = this;
		}
		
		private void detach_ParentType(ParentType entity)
		{
			this.SendPropertyChanging();
			entity.Children = null;
		}
		
		private void attach_Progress(Progress entity)
		{
			this.SendPropertyChanging();
			entity.Children = this;
		}
		
		private void detach_Progress(Progress entity)
		{
			this.SendPropertyChanging();
			entity.Children = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employees : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_employee;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronymic;
		
		private string _Position;
		
		private string _Phone;
		
		private string _Mail;
		
		private System.Nullable<decimal> _Salary;
		
		private string _Login;
		
		private string _Password;
		
		private string _PhotoURL;
		
		private EntitySet<Groups> _Groups;
		
		private EntitySet<Lesson> _Lesson;
		
		private EntitySet<News> _News;
		
		private EntitySet<Reviews> _Reviews;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_employeeChanging(int value);
    partial void OnID_employeeChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    partial void OnSalaryChanging(System.Nullable<decimal> value);
    partial void OnSalaryChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPhotoURLChanging(string value);
    partial void OnPhotoURLChanged();
    #endregion
		
		public Employees()
		{
			this._Groups = new EntitySet<Groups>(new Action<Groups>(this.attach_Groups), new Action<Groups>(this.detach_Groups));
			this._Lesson = new EntitySet<Lesson>(new Action<Lesson>(this.attach_Lesson), new Action<Lesson>(this.detach_Lesson));
			this._News = new EntitySet<News>(new Action<News>(this.attach_News), new Action<News>(this.detach_News));
			this._Reviews = new EntitySet<Reviews>(new Action<Reviews>(this.attach_Reviews), new Action<Reviews>(this.detach_Reviews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(20)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(20)")]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(20)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="NVarChar(20)")]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Money")]
		public System.Nullable<decimal> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(30)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(30)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoURL", DbType="NVarChar(255)")]
		public string PhotoURL
		{
			get
			{
				return this._PhotoURL;
			}
			set
			{
				if ((this._PhotoURL != value))
				{
					this.OnPhotoURLChanging(value);
					this.SendPropertyChanging();
					this._PhotoURL = value;
					this.SendPropertyChanged("PhotoURL");
					this.OnPhotoURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_Groups", Storage="_Groups", ThisKey="ID_employee", OtherKey="ID_employee")]
		public EntitySet<Groups> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_Lesson", Storage="_Lesson", ThisKey="ID_employee", OtherKey="ID_employee")]
		public EntitySet<Lesson> Lesson
		{
			get
			{
				return this._Lesson;
			}
			set
			{
				this._Lesson.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_News", Storage="_News", ThisKey="ID_employee", OtherKey="ID_employee")]
		public EntitySet<News> News
		{
			get
			{
				return this._News;
			}
			set
			{
				this._News.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_Reviews", Storage="_Reviews", ThisKey="ID_employee", OtherKey="ID_employee")]
		public EntitySet<Reviews> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Groups(Groups entity)
		{
			this.SendPropertyChanging();
			entity.Employees = this;
		}
		
		private void detach_Groups(Groups entity)
		{
			this.SendPropertyChanging();
			entity.Employees = null;
		}
		
		private void attach_Lesson(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Employees = this;
		}
		
		private void detach_Lesson(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Employees = null;
		}
		
		private void attach_News(News entity)
		{
			this.SendPropertyChanging();
			entity.Employees = this;
		}
		
		private void detach_News(News entity)
		{
			this.SendPropertyChanging();
			entity.Employees = null;
		}
		
		private void attach_Reviews(Reviews entity)
		{
			this.SendPropertyChanging();
			entity.Employees = this;
		}
		
		private void detach_Reviews(Reviews entity)
		{
			this.SendPropertyChanging();
			entity.Employees = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Groups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_group;
		
		private string _Name;
		
		private string _Description;
		
		private int _ID_employee;
		
		private int _ID_AgeGroup;
		
		private EntitySet<Children> _Children;
		
		private EntityRef<AgeGroup> _AgeGroup;
		
		private EntityRef<Employees> _Employees;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_groupChanging(int value);
    partial void OnID_groupChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnID_employeeChanging(int value);
    partial void OnID_employeeChanged();
    partial void OnID_AgeGroupChanging(int value);
    partial void OnID_AgeGroupChanged();
    #endregion
		
		public Groups()
		{
			this._Children = new EntitySet<Children>(new Action<Children>(this.attach_Children), new Action<Children>(this.detach_Children));
			this._AgeGroup = default(EntityRef<AgeGroup>);
			this._Employees = default(EntityRef<Employees>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_group", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_group
		{
			get
			{
				return this._ID_group;
			}
			set
			{
				if ((this._ID_group != value))
				{
					this.OnID_groupChanging(value);
					this.SendPropertyChanging();
					this._ID_group = value;
					this.SendPropertyChanged("ID_group");
					this.OnID_groupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(60)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", DbType="Int NOT NULL")]
		public int ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					if (this._Employees.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_AgeGroup", DbType="Int NOT NULL")]
		public int ID_AgeGroup
		{
			get
			{
				return this._ID_AgeGroup;
			}
			set
			{
				if ((this._ID_AgeGroup != value))
				{
					if (this._AgeGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_AgeGroupChanging(value);
					this.SendPropertyChanging();
					this._ID_AgeGroup = value;
					this.SendPropertyChanged("ID_AgeGroup");
					this.OnID_AgeGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_Children", Storage="_Children", ThisKey="ID_group", OtherKey="ID_group")]
		public EntitySet<Children> Children
		{
			get
			{
				return this._Children;
			}
			set
			{
				this._Children.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AgeGroup_Groups", Storage="_AgeGroup", ThisKey="ID_AgeGroup", OtherKey="ID_AgeGroup", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AgeGroup AgeGroup
		{
			get
			{
				return this._AgeGroup.Entity;
			}
			set
			{
				AgeGroup previousValue = this._AgeGroup.Entity;
				if (((previousValue != value) 
							|| (this._AgeGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AgeGroup.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._AgeGroup.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._ID_AgeGroup = value.ID_AgeGroup;
					}
					else
					{
						this._ID_AgeGroup = default(int);
					}
					this.SendPropertyChanged("AgeGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_Groups", Storage="_Employees", ThisKey="ID_employee", OtherKey="ID_employee", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employees Employees
		{
			get
			{
				return this._Employees.Entity;
			}
			set
			{
				Employees previousValue = this._Employees.Entity;
				if (((previousValue != value) 
							|| (this._Employees.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employees.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Employees.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._ID_employee = value.ID_employee;
					}
					else
					{
						this._ID_employee = default(int);
					}
					this.SendPropertyChanged("Employees");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Children(Children entity)
		{
			this.SendPropertyChanging();
			entity.Groups = this;
		}
		
		private void detach_Children(Children entity)
		{
			this.SendPropertyChanging();
			entity.Groups = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lesson")]
	public partial class Lesson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_lesson;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Difficulty;
		
		private string _Description;
		
		private int _ID_employee;
		
		private int _ID_LessonType;
		
		private System.Nullable<double> _Duration;
		
		private bool _IndividualLesson;
		
		private int _ID_Room;
		
		private System.Data.Linq.Binary _upsize_ts;
		
		private EntitySet<Progress> _Progress;
		
		private EntityRef<Employees> _Employees;
		
		private EntityRef<LessonType> _LessonType;
		
		private EntityRef<Room> _Room;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_lessonChanging(int value);
    partial void OnID_lessonChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnDifficultyChanging(string value);
    partial void OnDifficultyChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnID_employeeChanging(int value);
    partial void OnID_employeeChanged();
    partial void OnID_LessonTypeChanging(int value);
    partial void OnID_LessonTypeChanged();
    partial void OnDurationChanging(System.Nullable<double> value);
    partial void OnDurationChanged();
    partial void OnIndividualLessonChanging(bool value);
    partial void OnIndividualLessonChanged();
    partial void OnID_RoomChanging(int value);
    partial void OnID_RoomChanged();
    partial void Onupsize_tsChanging(System.Data.Linq.Binary value);
    partial void Onupsize_tsChanged();
    #endregion
		
		public Lesson()
		{
			this._Progress = new EntitySet<Progress>(new Action<Progress>(this.attach_Progress), new Action<Progress>(this.detach_Progress));
			this._Employees = default(EntityRef<Employees>);
			this._LessonType = default(EntityRef<LessonType>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_lesson", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID_lesson
		{
			get
			{
				return this._ID_lesson;
			}
			set
			{
				if ((this._ID_lesson != value))
				{
					this.OnID_lessonChanging(value);
					this.SendPropertyChanging();
					this._ID_lesson = value;
					this.SendPropertyChanged("ID_lesson");
					this.OnID_lessonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Difficulty", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string Difficulty
		{
			get
			{
				return this._Difficulty;
			}
			set
			{
				if ((this._Difficulty != value))
				{
					this.OnDifficultyChanging(value);
					this.SendPropertyChanging();
					this._Difficulty = value;
					this.SendPropertyChanged("Difficulty");
					this.OnDifficultyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(60)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					if (this._Employees.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_LessonType", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ID_LessonType
		{
			get
			{
				return this._ID_LessonType;
			}
			set
			{
				if ((this._ID_LessonType != value))
				{
					if (this._LessonType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_LessonTypeChanging(value);
					this.SendPropertyChanging();
					this._ID_LessonType = value;
					this.SendPropertyChanged("ID_LessonType");
					this.OnID_LessonTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndividualLesson", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IndividualLesson
		{
			get
			{
				return this._IndividualLesson;
			}
			set
			{
				if ((this._IndividualLesson != value))
				{
					this.OnIndividualLessonChanging(value);
					this.SendPropertyChanging();
					this._IndividualLesson = value;
					this.SendPropertyChanged("IndividualLesson");
					this.OnIndividualLessonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Room", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ID_Room
		{
			get
			{
				return this._ID_Room;
			}
			set
			{
				if ((this._ID_Room != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_RoomChanging(value);
					this.SendPropertyChanging();
					this._ID_Room = value;
					this.SendPropertyChanged("ID_Room");
					this.OnID_RoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_upsize_ts", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary upsize_ts
		{
			get
			{
				return this._upsize_ts;
			}
			set
			{
				if ((this._upsize_ts != value))
				{
					this.Onupsize_tsChanging(value);
					this.SendPropertyChanging();
					this._upsize_ts = value;
					this.SendPropertyChanged("upsize_ts");
					this.Onupsize_tsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Progress", Storage="_Progress", ThisKey="ID_lesson", OtherKey="ID_lesson")]
		public EntitySet<Progress> Progress
		{
			get
			{
				return this._Progress;
			}
			set
			{
				this._Progress.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_Lesson", Storage="_Employees", ThisKey="ID_employee", OtherKey="ID_employee", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employees Employees
		{
			get
			{
				return this._Employees.Entity;
			}
			set
			{
				Employees previousValue = this._Employees.Entity;
				if (((previousValue != value) 
							|| (this._Employees.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employees.Entity = null;
						previousValue.Lesson.Remove(this);
					}
					this._Employees.Entity = value;
					if ((value != null))
					{
						value.Lesson.Add(this);
						this._ID_employee = value.ID_employee;
					}
					else
					{
						this._ID_employee = default(int);
					}
					this.SendPropertyChanged("Employees");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonType_Lesson", Storage="_LessonType", ThisKey="ID_LessonType", OtherKey="ID_LessonType", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LessonType LessonType
		{
			get
			{
				return this._LessonType.Entity;
			}
			set
			{
				LessonType previousValue = this._LessonType.Entity;
				if (((previousValue != value) 
							|| (this._LessonType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LessonType.Entity = null;
						previousValue.Lesson.Remove(this);
					}
					this._LessonType.Entity = value;
					if ((value != null))
					{
						value.Lesson.Add(this);
						this._ID_LessonType = value.ID_LessonType;
					}
					else
					{
						this._ID_LessonType = default(int);
					}
					this.SendPropertyChanged("LessonType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Lesson", Storage="_Room", ThisKey="ID_Room", OtherKey="ID_Room", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Lesson.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Lesson.Add(this);
						this._ID_Room = value.ID_Room;
					}
					else
					{
						this._ID_Room = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Progress(Progress entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = this;
		}
		
		private void detach_Progress(Progress entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LessonType")]
	public partial class LessonType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_LessonType;
		
		private string _TypeName;
		
		private EntitySet<Lesson> _Lesson;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_LessonTypeChanging(int value);
    partial void OnID_LessonTypeChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public LessonType()
		{
			this._Lesson = new EntitySet<Lesson>(new Action<Lesson>(this.attach_Lesson), new Action<Lesson>(this.detach_Lesson));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_LessonType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_LessonType
		{
			get
			{
				return this._ID_LessonType;
			}
			set
			{
				if ((this._ID_LessonType != value))
				{
					this.OnID_LessonTypeChanging(value);
					this.SendPropertyChanging();
					this._ID_LessonType = value;
					this.SendPropertyChanged("ID_LessonType");
					this.OnID_LessonTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(20)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonType_Lesson", Storage="_Lesson", ThisKey="ID_LessonType", OtherKey="ID_LessonType")]
		public EntitySet<Lesson> Lesson
		{
			get
			{
				return this._Lesson;
			}
			set
			{
				this._Lesson.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lesson(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.LessonType = this;
		}
		
		private void detach_Lesson(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.LessonType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
	public partial class News : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_news;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Head;
		
		private string _Statement;
		
		private bool _Priority;
		
		private System.Nullable<int> _ID_employee;
		
		private EntityRef<Employees> _Employees;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_newsChanging(int value);
    partial void OnID_newsChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnHeadChanging(string value);
    partial void OnHeadChanged();
    partial void OnStatementChanging(string value);
    partial void OnStatementChanged();
    partial void OnPriorityChanging(bool value);
    partial void OnPriorityChanged();
    partial void OnID_employeeChanging(System.Nullable<int> value);
    partial void OnID_employeeChanged();
    #endregion
		
		public News()
		{
			this._Employees = default(EntityRef<Employees>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_news", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_news
		{
			get
			{
				return this._ID_news;
			}
			set
			{
				if ((this._ID_news != value))
				{
					this.OnID_newsChanging(value);
					this.SendPropertyChanging();
					this._ID_news = value;
					this.SendPropertyChanged("ID_news");
					this.OnID_newsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Head", DbType="NVarChar(50)")]
		public string Head
		{
			get
			{
				return this._Head;
			}
			set
			{
				if ((this._Head != value))
				{
					this.OnHeadChanging(value);
					this.SendPropertyChanging();
					this._Head = value;
					this.SendPropertyChanged("Head");
					this.OnHeadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Statement", DbType="NVarChar(100)")]
		public string Statement
		{
			get
			{
				return this._Statement;
			}
			set
			{
				if ((this._Statement != value))
				{
					this.OnStatementChanging(value);
					this.SendPropertyChanging();
					this._Statement = value;
					this.SendPropertyChanged("Statement");
					this.OnStatementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Bit NOT NULL")]
		public bool Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", DbType="Int")]
		public System.Nullable<int> ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					if (this._Employees.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_News", Storage="_Employees", ThisKey="ID_employee", OtherKey="ID_employee", IsForeignKey=true, DeleteRule="CASCADE")]
		public Employees Employees
		{
			get
			{
				return this._Employees.Entity;
			}
			set
			{
				Employees previousValue = this._Employees.Entity;
				if (((previousValue != value) 
							|| (this._Employees.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employees.Entity = null;
						previousValue.News.Remove(this);
					}
					this._Employees.Entity = value;
					if ((value != null))
					{
						value.News.Add(this);
						this._ID_employee = value.ID_employee;
					}
					else
					{
						this._ID_employee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employees");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parents")]
	public partial class Parents : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_parent;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronymic;
		
		private string _Phone;
		
		private string _Mail;
		
		private string _Login;
		
		private string _Password;
		
		private EntitySet<Applications> _Applications;
		
		private EntitySet<ParentType> _ParentType;
		
		private EntitySet<Reviews> _Reviews;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_parentChanging(int value);
    partial void OnID_parentChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Parents()
		{
			this._Applications = new EntitySet<Applications>(new Action<Applications>(this.attach_Applications), new Action<Applications>(this.detach_Applications));
			this._ParentType = new EntitySet<ParentType>(new Action<ParentType>(this.attach_ParentType), new Action<ParentType>(this.detach_ParentType));
			this._Reviews = new EntitySet<Reviews>(new Action<Reviews>(this.attach_Reviews), new Action<Reviews>(this.detach_Reviews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_parent", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_parent
		{
			get
			{
				return this._ID_parent;
			}
			set
			{
				if ((this._ID_parent != value))
				{
					this.OnID_parentChanging(value);
					this.SendPropertyChanging();
					this._ID_parent = value;
					this.SendPropertyChanged("ID_parent");
					this.OnID_parentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(20)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(20)")]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="NVarChar(20)")]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(30)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(30)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parents_Applications", Storage="_Applications", ThisKey="ID_parent", OtherKey="ID_parent")]
		public EntitySet<Applications> Applications
		{
			get
			{
				return this._Applications;
			}
			set
			{
				this._Applications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parents_ParentType", Storage="_ParentType", ThisKey="ID_parent", OtherKey="ID_parent")]
		public EntitySet<ParentType> ParentType
		{
			get
			{
				return this._ParentType;
			}
			set
			{
				this._ParentType.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parents_Reviews", Storage="_Reviews", ThisKey="ID_parent", OtherKey="ID_parent")]
		public EntitySet<Reviews> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applications(Applications entity)
		{
			this.SendPropertyChanging();
			entity.Parents = this;
		}
		
		private void detach_Applications(Applications entity)
		{
			this.SendPropertyChanging();
			entity.Parents = null;
		}
		
		private void attach_ParentType(ParentType entity)
		{
			this.SendPropertyChanging();
			entity.Parents = this;
		}
		
		private void detach_ParentType(ParentType entity)
		{
			this.SendPropertyChanging();
			entity.Parents = null;
		}
		
		private void attach_Reviews(Reviews entity)
		{
			this.SendPropertyChanging();
			entity.Parents = this;
		}
		
		private void detach_Reviews(Reviews entity)
		{
			this.SendPropertyChanging();
			entity.Parents = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParentType")]
	public partial class ParentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_child;
		
		private int _ID_parent;
		
		private string _Name;
		
		private string _Status;
		
		private EntityRef<Children> _Children;
		
		private EntityRef<Parents> _Parents;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_childChanging(int value);
    partial void OnID_childChanged();
    partial void OnID_parentChanging(int value);
    partial void OnID_parentChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public ParentType()
		{
			this._Children = default(EntityRef<Children>);
			this._Parents = default(EntityRef<Parents>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_child", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_child
		{
			get
			{
				return this._ID_child;
			}
			set
			{
				if ((this._ID_child != value))
				{
					if (this._Children.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_childChanging(value);
					this.SendPropertyChanging();
					this._ID_child = value;
					this.SendPropertyChanged("ID_child");
					this.OnID_childChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_parent", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_parent
		{
			get
			{
				return this._ID_parent;
			}
			set
			{
				if ((this._ID_parent != value))
				{
					if (this._Parents.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_parentChanging(value);
					this.SendPropertyChanging();
					this._ID_parent = value;
					this.SendPropertyChanged("ID_parent");
					this.OnID_parentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(40)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(40)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Children_ParentType", Storage="_Children", ThisKey="ID_child", OtherKey="ID_child", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Children Children
		{
			get
			{
				return this._Children.Entity;
			}
			set
			{
				Children previousValue = this._Children.Entity;
				if (((previousValue != value) 
							|| (this._Children.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Children.Entity = null;
						previousValue.ParentType.Remove(this);
					}
					this._Children.Entity = value;
					if ((value != null))
					{
						value.ParentType.Add(this);
						this._ID_child = value.ID_child;
					}
					else
					{
						this._ID_child = default(int);
					}
					this.SendPropertyChanged("Children");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parents_ParentType", Storage="_Parents", ThisKey="ID_parent", OtherKey="ID_parent", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Parents Parents
		{
			get
			{
				return this._Parents.Entity;
			}
			set
			{
				Parents previousValue = this._Parents.Entity;
				if (((previousValue != value) 
							|| (this._Parents.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parents.Entity = null;
						previousValue.ParentType.Remove(this);
					}
					this._Parents.Entity = value;
					if ((value != null))
					{
						value.ParentType.Add(this);
						this._ID_parent = value.ID_parent;
					}
					else
					{
						this._ID_parent = default(int);
					}
					this.SendPropertyChanged("Parents");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Progress")]
	public partial class Progress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_child;
		
		private int _ID_lesson;
		
		private string _Behavior;
		
		private System.Nullable<int> _Grade;
		
		private EntityRef<Children> _Children;
		
		private EntityRef<Lesson> _Lesson;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_childChanging(int value);
    partial void OnID_childChanged();
    partial void OnID_lessonChanging(int value);
    partial void OnID_lessonChanged();
    partial void OnBehaviorChanging(string value);
    partial void OnBehaviorChanged();
    partial void OnGradeChanging(System.Nullable<int> value);
    partial void OnGradeChanged();
    #endregion
		
		public Progress()
		{
			this._Children = default(EntityRef<Children>);
			this._Lesson = default(EntityRef<Lesson>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_child", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_child
		{
			get
			{
				return this._ID_child;
			}
			set
			{
				if ((this._ID_child != value))
				{
					if (this._Children.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_childChanging(value);
					this.SendPropertyChanging();
					this._ID_child = value;
					this.SendPropertyChanged("ID_child");
					this.OnID_childChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_lesson", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_lesson
		{
			get
			{
				return this._ID_lesson;
			}
			set
			{
				if ((this._ID_lesson != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_lessonChanging(value);
					this.SendPropertyChanging();
					this._ID_lesson = value;
					this.SendPropertyChanged("ID_lesson");
					this.OnID_lessonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Behavior", DbType="NVarChar(50)")]
		public string Behavior
		{
			get
			{
				return this._Behavior;
			}
			set
			{
				if ((this._Behavior != value))
				{
					this.OnBehaviorChanging(value);
					this.SendPropertyChanging();
					this._Behavior = value;
					this.SendPropertyChanged("Behavior");
					this.OnBehaviorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Int")]
		public System.Nullable<int> Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Children_Progress", Storage="_Children", ThisKey="ID_child", OtherKey="ID_child", IsForeignKey=true)]
		public Children Children
		{
			get
			{
				return this._Children.Entity;
			}
			set
			{
				Children previousValue = this._Children.Entity;
				if (((previousValue != value) 
							|| (this._Children.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Children.Entity = null;
						previousValue.Progress.Remove(this);
					}
					this._Children.Entity = value;
					if ((value != null))
					{
						value.Progress.Add(this);
						this._ID_child = value.ID_child;
					}
					else
					{
						this._ID_child = default(int);
					}
					this.SendPropertyChanged("Children");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Progress", Storage="_Lesson", ThisKey="ID_lesson", OtherKey="ID_lesson", IsForeignKey=true)]
		public Lesson Lesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.Progress.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.Progress.Add(this);
						this._ID_lesson = value.ID_lesson;
					}
					else
					{
						this._ID_lesson = default(int);
					}
					this.SendPropertyChanged("Lesson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reviews")]
	public partial class Reviews : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_review;
		
		private string _Description;
		
		private int _ID_parent;
		
		private int _ID_employee;
		
		private EntityRef<Employees> _Employees;
		
		private EntityRef<Parents> _Parents;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_reviewChanging(int value);
    partial void OnID_reviewChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnID_parentChanging(int value);
    partial void OnID_parentChanged();
    partial void OnID_employeeChanging(int value);
    partial void OnID_employeeChanged();
    #endregion
		
		public Reviews()
		{
			this._Employees = default(EntityRef<Employees>);
			this._Parents = default(EntityRef<Parents>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_review", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_review
		{
			get
			{
				return this._ID_review;
			}
			set
			{
				if ((this._ID_review != value))
				{
					this.OnID_reviewChanging(value);
					this.SendPropertyChanging();
					this._ID_review = value;
					this.SendPropertyChanged("ID_review");
					this.OnID_reviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_parent", DbType="Int NOT NULL")]
		public int ID_parent
		{
			get
			{
				return this._ID_parent;
			}
			set
			{
				if ((this._ID_parent != value))
				{
					if (this._Parents.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_parentChanging(value);
					this.SendPropertyChanging();
					this._ID_parent = value;
					this.SendPropertyChanged("ID_parent");
					this.OnID_parentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", DbType="Int NOT NULL")]
		public int ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					if (this._Employees.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_Reviews", Storage="_Employees", ThisKey="ID_employee", OtherKey="ID_employee", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employees Employees
		{
			get
			{
				return this._Employees.Entity;
			}
			set
			{
				Employees previousValue = this._Employees.Entity;
				if (((previousValue != value) 
							|| (this._Employees.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employees.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._Employees.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._ID_employee = value.ID_employee;
					}
					else
					{
						this._ID_employee = default(int);
					}
					this.SendPropertyChanged("Employees");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parents_Reviews", Storage="_Parents", ThisKey="ID_parent", OtherKey="ID_parent", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Parents Parents
		{
			get
			{
				return this._Parents.Entity;
			}
			set
			{
				Parents previousValue = this._Parents.Entity;
				if (((previousValue != value) 
							|| (this._Parents.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parents.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._Parents.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._ID_parent = value.ID_parent;
					}
					else
					{
						this._ID_parent = default(int);
					}
					this.SendPropertyChanged("Parents");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Room;
		
		private string _Name;
		
		private System.Nullable<int> _Square;
		
		private EntitySet<Lesson> _Lesson;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_RoomChanging(int value);
    partial void OnID_RoomChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSquareChanging(System.Nullable<int> value);
    partial void OnSquareChanged();
    #endregion
		
		public Room()
		{
			this._Lesson = new EntitySet<Lesson>(new Action<Lesson>(this.attach_Lesson), new Action<Lesson>(this.detach_Lesson));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Room", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Room
		{
			get
			{
				return this._ID_Room;
			}
			set
			{
				if ((this._ID_Room != value))
				{
					this.OnID_RoomChanging(value);
					this.SendPropertyChanging();
					this._ID_Room = value;
					this.SendPropertyChanged("ID_Room");
					this.OnID_RoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Square", DbType="Int")]
		public System.Nullable<int> Square
		{
			get
			{
				return this._Square;
			}
			set
			{
				if ((this._Square != value))
				{
					this.OnSquareChanging(value);
					this.SendPropertyChanging();
					this._Square = value;
					this.SendPropertyChanged("Square");
					this.OnSquareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Lesson", Storage="_Lesson", ThisKey="ID_Room", OtherKey="ID_Room")]
		public EntitySet<Lesson> Lesson
		{
			get
			{
				return this._Lesson;
			}
			set
			{
				this._Lesson.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lesson(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Lesson(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
}
#pragma warning restore 1591
